1)Don't provide "setter" methods â€” methods that modify fields or objects referred to by fields.
2)Make all fields final and private.
3)Don't allow subclasses to override methods. The simplest way to do this is to declare the class as final. A more sophisticated approach is to make the constructor 
private and construct instances in factory methods.
4)If the instance fields include references to mutable objects, don't allow those objects to be changed:
a)Don't provide methods that modify the mutable objects.
b)Don't share references to the mutable objects.
c)Never store references to external, mutable objects passed to the constructor; if necessary, create copies, and store references to the copies. 
Similarly, create copies of your internal mutable objects when necessary to avoid returning the originals in your methods.
public final class Immutable {

	private String name;

	private Employee employee;

	public Immutable(String name, Employee employee) {
		super();
		this.name = name;
		Employee emp = new Employee(this.employee.getId());
		emp.setId(this.employee.getId());
		this.employee = emp;
	}

	public Employee getBook() {
		// Do not return the Employee, but a new copy. Do not want the readers
		// Employee to change it's state if developer changes book after this call.
		Employee empCopy = new Employee(this.employee.getId());
		empCopy.setId(this.employee.getId());
		return empCopy;
	}

	public String getName() {
		return name;
	}
  }
  
  ================================
  
  public class Employee {
	
	
	
	Integer id;
	

	public Employee(Integer id) {
		super();
		this.id = id;
	}
  	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}
  }
  
  
